name: Nightly RAG Evaluation

on:
  schedule:
    # Run at 02:30 UTC daily
    - cron: '30 2 * * *'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'

env:
  # Redaction flags - keep PII and protocol content secure
  PII_REDACTION: 1
  LOG_REDACTION: 1
  INTEGRITY_DEBUG: 0
  ALLOW_PROMPT_LOGGING: 0
  DISABLE_DEBUG_ENDPOINTS: 1
  # Suppress tokenizers fork warning
  TOKENIZERS_PARALLELISM: false

jobs:
  eval-nightly:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for baseline comparison
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        # Install lichen-chunker as it's needed for evaluation
        pip install -e lichen-chunker/
    
    - name: Run RAG evaluation on both lanes
      run: |
        echo "Running evaluation on fast and accurate lanes..."
        python -m eval.run_eval --evalset eval/datasets/founder_early.jsonl --outdir eval/out
    
    - name: Check for regressions
      id: regression_check
      run: |
        python eval/ci/check_regressions.py \
          --current-fast eval/out/summary_fast.json \
          --current-accurate eval/out/summary_accurate.json \
          --baseline-dir .eval_baseline \
          --tolerance 0.01 \
          --output-format json > regression_results.json
        
        # Check if regressions were found
        if [ -f regression_results.json ]; then
          REGRESSIONS=$(python -c "import json; data=json.load(open('regression_results.json')); print('true' if data.get('has_regressions', False) else 'false')")
          echo "has_regressions=$REGRESSIONS" >> $GITHUB_OUTPUT
          
          # Store regression details for later steps
          echo "regression_details<<EOF" >> $GITHUB_OUTPUT
          cat regression_results.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "has_regressions=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate job summary
      if: always()
      run: |
        echo "## üìä Nightly RAG Evaluation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generate metrics table for both lanes
        python eval/ci/generate_summary.py \
          --fast-summary eval/out/summary_fast.json \
          --accurate-summary eval/out/summary_accurate.json \
          --baseline-dir .eval_baseline \
          --output-format markdown >> $GITHUB_STEP_SUMMARY
        
        # Add regression status
        if [ "${{ steps.regression_check.outputs.has_regressions }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Regression detected!** See details below." >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **No regressions detected.**" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.regression_check.outputs.has_regressions == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let regressionData = {};
          try {
            regressionData = JSON.parse(fs.readFileSync('regression_results.json', 'utf8'));
          } catch (e) {
            console.log('Could not parse regression results');
          }
          
          const comment = `## üö® RAG Evaluation Regression Detected
          
          The nightly evaluation detected performance regressions beyond the 0.01 tolerance threshold.
          
          ### Regression Details:
          ${regressionData.regressions ? regressionData.regressions.map(r => 
            `- **${r.lane} lane**: ${r.metric} changed from ${r.baseline_value.toFixed(3)} to ${r.current_value.toFixed(3)} (Œî${r.delta > 0 ? '+' : ''}${r.delta.toFixed(3)})`
          ).join('\n') : 'No detailed regression data available'}
          
          ### Artifacts:
          - [Fast lane results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Accurate lane results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          Please investigate and address these regressions before merging.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create regression issue (scheduled runs only)
      if: github.event_name == 'schedule' && steps.regression_check.outputs.has_regressions == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let regressionData = {};
          try {
            regressionData = JSON.parse(fs.readFileSync('regression_results.json', 'utf8'));
          } catch (e) {
            console.log('Could not parse regression results');
          }
          
          const today = new Date().toISOString().split('T')[0];
          const title = `Nightly Eval Regression ‚Äî ${today}`;
          
          const body = `## üö® Nightly RAG Evaluation Regression Detected
          
          **Date**: ${today}
          **Run**: [${github.run_id}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Regression Details:
          ${regressionData.regressions ? regressionData.regressions.map(r => 
            `- **${r.lane} lane**: ${r.metric} changed from ${r.baseline_value.toFixed(3)} to ${r.current_value.toFixed(3)} (Œî${r.delta > 0 ? '+' : ''}${r.delta.toFixed(3)})`
          ).join('\n') : 'No detailed regression data available'}
          
          ### Next Steps:
          1. Investigate the cause of the regression
          2. Check recent changes that might have affected RAG performance
          3. Update baseline if regression is acceptable
          4. Close this issue once resolved
          
          ### Artifacts:
          - [Fast lane results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Accurate lane results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['regression', 'rag-eval', 'nightly']
          });
    
    - name: Update baseline (if no regressions)
      if: steps.regression_check.outputs.has_regressions == 'false'
      run: |
        echo "Updating baseline with current results..."
        mkdir -p .eval_baseline
        cp eval/out/summary_fast.json .eval_baseline/summary_fast.json
        cp eval/out/summary_accurate.json .eval_baseline/summary_accurate.json
        
        # Commit baseline update (only on main branch)
        if [ "${{ github.ref }}" == "refs/heads/master" ] || [ "${{ github.ref }}" == "refs/heads/main" ]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .eval_baseline/
          git commit -m "ci(eval): update baseline after successful nightly run" || echo "No changes to commit"
          git push || echo "Could not push baseline update"
        fi
    
    - name: Upload evaluation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rag-eval-results-${{ github.run_number }}
        path: |
          eval/out/records_fast.jsonl
          eval/out/records_accurate.jsonl
          eval/out/summary_fast.json
          eval/out/summary_accurate.json
        retention-days: 14
    
    - name: Fail on regression
      if: steps.regression_check.outputs.has_regressions == 'true'
      run: |
        echo "‚ùå Evaluation failed due to performance regressions"
        echo "Check the regression details above and address the issues"
        exit 1
